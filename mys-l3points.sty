%
%####################################################
%
%  Declaration package
%
%####################################################
%
\ProvidesExplPackage%
	{mys-l3points}%
	{2015/02/13}%
	{0.0}%
	{points}%
%
%####################################################
%
\@ifpackageloaded{expl3}{}{\RequirePackage{expl3}}
\@ifpackageloaded{xparse}{}{\RequirePackage{xparse}}
\@ifpackageloaded{l3keys2e}{}{\RequirePackage{l3keys2e}}
\@ifpackageloaded{siunitx}{}{\RequirePackage{siunitx}}
%
%####################################################
%####################################################
%##########
%##########    CODE
%##########
%####################################################
%####################################################
%
%####################################################
%
% Formatage des coordonnées
%
%####################################################
%
\int_new:N\__mys_point_dim
\tl_new:N\__mys_point_name
\fp_new:N\__mys_point_abs
\fp_new:N\__mys_point_ord
\fp_new:N\__mys_point_cot
\seq_new:N\__mys_point_set
%
\NewDocumentCommand{\coordo}{sm}
  {
  \seq_set_split:Nnn\__mys_point_set{,}{#1}%
  \int_set:Nn\__mys_point_dim
    {\seq_count:N\__mys_point_set-1}
  \seq_map_inline:Nn\__mys_point_set{\numprint{##1}}
  }
%
%####################################################
%
% Initialisation de points : \setpoints
%
%####################################################
%
\cs_generate_variant:Nn\tl_if_in:NnTF{NVTF,NfTF,NxTF}
\cs_generate_variant:Nn\seq_set_split:Nnn{NVn}
%
\seq_new:N\l__mys_points_seq
\seq_new:N\l__mys_points_sanitized_seq
\seq_new:N\l__mys_point_seq
\int_new:N\l__mys_points_dim_int
%
\tl_set:Nn\l__mys_points_element_sep_tl{,}%
\tl_set:Nn\l__mys_points_sep_tl{;}%
\tl_set:Nn\l__mys_letters_cap_tl
  {ABCDEFGHIJKLMNOPQRSTUVWXYZ}
\tl_set:Nn\l__mys_letters_tl
  {abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ}
\tl_set:Nn\l__mys_digits_tl{0123456789}
%
%\sisetup{round-half=up,zero-decimal-to-integer,input-protect-tokens={\frac},quotient-mode=fraction}
%
% User macro
%
\cs_new:Npn\mypoints{}
%
\NewDocumentCommand{\setpoints}{O{mypoints}m}
  {
  \tl_gset:cn{#1raw}{#2}
  \_mys_points_setpoints:fVVc
    {#2}
    \l__mys_points_sep_tl
    \l__mys_points_element_sep_tl
    {#1}
  }
%
% Aux macros
%
%
% Main macro
%
\cs_new_protected:Npn\_mys_points_setpoints:nnnN#1#2#3#4
  {
  \seq_clear:N\l__mys_points_sanitized_seq
  \seq_set_split:Nnn\l__mys_points_seq{#2}{#1}% points stored in seq
  \_mys_points_sanitizepoints:NnnN
    \l__mys_points_seq
    {#2}
    {#3}
    \l__mys_points_sanitized_seq
  \_mys_points_setpoints_aux:NnN
    \l__mys_points_sanitized_seq
    {#3}
    #4
  }
%
\cs_generate_variant:Nn\_mys_points_setpoints:nnnN{nVVN,xVVN,fVVc}
%
% sanitize
%
\int_new:N\l__mys_point_missingname_int
%
\cs_new_protected:Npn
  \_mys_points_sanitizepoints:NnnN#1#2#3#4
% #1 : list of points in seq (cs)
% #2 : separator of points
% #3 : separator of point's elements
  {
  \int_zero:N\l__mys_point_missingname_int	
  \seq_map_inline:Nn#1
    {
    \seq_set_split:Nnn\l__mys_point_seq{#2}{##1}
    \_mys_points_sanitizeonepoint:NN
      \l__mys_point_seq
      \l__mys_point_missingname_int
    \tl_set:Nx\l_tmpa_tl
      {\seq_use:Nn\l__mys_point_seq{#3}}
    \seq_put_right:NV#4\l_tmpa_tl
    }
  }
%
\cs_generate_variant:Nn
  \_mys_points_sanitizepoints:NnnN{NnVN}
%
%
%
\cs_new_protected:Npn\_mys_points_sanitizeonepoint:NN#1#2
% #1 : points in seq (cs)
% A revoir : il faut tester que les nombres sont valides, autoriser les commandes comme \frac, 	autoriser _, ^, +, -, *, /
  {
  \group_begin:% #1 isn't popped when macro is done%
  \seq_pop_left:NN#1\l_tmpa_tl
  \clist_set:NV\l_tmpa_clist\l_tmpa_tl
  \clist_get:NN\l_tmpa_clist\l_tmpb_tl
  \edef\tmp{coord\tl_use:N\l_tmpb_tl}
  \expandafter\@ifundefined\expandafter{\tmp}{}{\cs_undefine:c{coord\tl_use:N\l_tmpb_tl}}
  \edef\tmp{raw\tl_use:N\l_tmpb_tl}
  \expandafter\@ifundefined\expandafter{\tmp}{}{\cs_undefine:c{raw\tl_use:N\l_tmpb_tl}}
  \edef\tmp{rawx\tl_use:N\l_tmpb_tl}
  \expandafter\@ifundefined\expandafter{\tmp}{}{\cs_undefine:c{rawx\tl_use:N\l_tmpb_tl}}
  \edef\tmp{rawy\tl_use:N\l_tmpb_tl}
  \expandafter\@ifundefined\expandafter{\tmp}{}{\cs_undefine:c{rawy\tl_use:N\l_tmpb_tl}}
  \edef\tmp{rawz\tl_use:N\l_tmpb_tl}
  \expandafter\@ifundefined\expandafter{\tmp}{}{\cs_undefine:c{rawz\tl_use:N\l_tmpb_tl}}
  \tl_if_in:NfTF
    \l__mys_letters_cap_tl
    {\tl_head:N\l_tmpa_tl}
    {
    \group_end:
    \_mys_points_sanitizeonepoint_name:N#1
    }% assignation is valid after the group
    {
    \group_end:
    \_mys_points_sanitizeonepoint_noname:NN#1#2
    \seq_gput_left:Nx#1{M_\int_use:N#2}
    \c_math_subscript_token
    \int_incr:N#2
    }
  }
%
% A faire ...
%
\cs_new_protected:Npn\_mys_points_sanitizeonepoint_name:N#1
  {
  % check that name is good
  % check that the rest is good for coordinates
  }
%
%
%
\cs_new_protected:Npn
  \_mys_points_sanitizeonepoint_noname:NN#1#2
  {
	%\seq_gput_left:Nx#1{M_{\int_use:N#2}}ù	
	% check that the rest is good for coordinates
  }
%
%
%
\cs_new_protected:Npn\_mys_points_setpoints_aux:NnN#1#2#3
% #1 : sequence (list of points) of tl (points).
  { 
  \tl_gclear:N#3
  \seq_map_inline:Nn#1
    {
    \seq_set_split:Nnn\l_tmpa_seq{#2}{##1}
    \_mys_points_setonepoint_aux:NN\l_tmpa_seq#3
    }
  \tl_set:Nf#3{\tl_tail:N#3}
  }
%
%
%
\NewDocumentCommand{\addpoints}{O{\mypoints}m}
  {
  \cs_set:Npn\__mslf_pointstmp:{}
  \_mys_points_setpoints:xVVN
    {#2}
    \l__mys_points_sep_tl
    \l__mys_points_element_sep_tl
    \__mslf_pointstmp:
  \cs_set:Npx#1{#1,\__mslf_pointstmp:}
  }
%
%
%
\cs_generate_variant:Nn\cs_set:Npn{Npo}
\cs_generate_variant:Nn\seq_pop_left:NN{Nc}
\cs_generate_variant:Nn\exp_args:NNnV{NNVV}
%
\cs_new_protected:Npn\_mys_points_setonepoint_aux:NN#1#2
% #1 : seq storing point
  {
  \group_begin:
  \seq_pop_left:NN#1\l_tmpa_tl
  \tl_gput_right:Nx#2{,\l_tmpa_tl}
  \seq_gset_eq:cN{l_point\tl_use:N\l_tmpa_tl _seq}#1
  \int_zero:N\l_tmpa_int
  \seq_map_inline:Nn#1
    {
    \int_incr:N\l_tmpa_int
    \tl_set:cn{l__coord_\int_use:N\l_tmpa_int _tl}{##1}
    \tl_gset_eq:cc
      {l__mys_points_\tl_use:N\l_tmpa_tl coord \int_use:N\l_tmpa_int _tl}
      {l__coord_\int_use:N\l_tmpa_int _tl}
    \group_begin:
    \def\frac####1####2{(####1)/(####2)}
    \def\sqrt####1{sqrt(####1)}
    \def\exp####1{exp(####1)}
    \fp_gset:cn
      {l__mys_points_\tl_use:N\l_tmpa_tl coord \int_use:N\l_tmpa_int _fp}
      {\fp_eval:n{##1}}
    \group_end:
    }
  \fp_gset:cn
    {l__mys_points_\tl_use:N\l_tmpa_tl dim_fp}
    {\int_eval:n{\l_tmpa_int}}% a faire avec un int mais pb 
  \exp_args:NNVV
    \group_end:
    \__mys_points_accessors:nnN
    \l_tmpa_tl
    \l_tmpa_int
    #1
  }
%
% Accessors
%
\tl_const:Nn\c_cfrac_lbrace_tl{\if_true:{\else:}\fi:}
\tl_const:Nn\c_cfrac_rbrace_tl{\if_false:{\else:}\fi:}
%
\bool_new:N\l__mys_points_macroincoord_bool
\bool_new:N\l__mys_points_csincoord_bool
%
%
%
\cs_new:Npn\__mys_points_accessors:nnN#1#2#3
% #1 : point's name
% #2 : point's dim
% #3 : seq storing points
  {
  \int_step_inline:nnnn
    {1}{1}{#2}
    {
%    \cs_if_exist:cT
%      {x##1#1}
%      {\cs_undefine:c{x##1#1}}
     \cs_undefine:c{x##1#1}
    \exp_args:Nc\NewDocumentCommand{x##1#1}{O{}}
      {
      \num[##1]
        {\tl_use:c{l__mys_points_#1 coord##1_tl}}
      }%parse-numbers=false
   \cs_undefine:c{rawx##1#1}
    \exp_args:Nc\DeclareExpandableDocumentCommand
      {rawx##1#1}{}
      {\fp_use:c{l__mys_points_#1 coord##1_fp}}
    \int_compare:nT
      {##1>=1}
      {
      \cs_if_free:cTF{x#1}%
        {
         \exp_args:Nc\NewDocumentCommand{x#1}{O{}}
           {\num[####1]{\tl_use:c{l__mys_points_#1 coord1_tl}}}
        }
        {
         \exp_args:Nc\RenewDocumentCommand{x#1}{O{}}
           {\num[####1]{\tl_use:c{l__mys_points_#1 coord1_tl}}}
        }
     \cs_undefine:c{abs#1}
      \cs_set_eq:cc{abs#1}{x#1}
      \exp_args:Nc\DeclareExpandableDocumentCommand
        {rawx#1}{}{\fp_use:c{l__mys_points_#1 coord1_fp}}
      }
    \int_compare:nT{##1>=2}
      {
   \cs_undefine:c{y#1}
      \exp_args:Nc\NewDocumentCommand{y#1}{O{}}
        {
        \num[####1]{\tl_use:c{l__mys_points_#1 coord2_tl}}
        }
%      \cs_if_exist:cT{ord#1}
%      \cs_if_free:cF{ord#1}
%        {\cs_undefine:c{ord#1}}
\cs_undefine:c{ord#1}
      \cs_set_eq:cc{ord#1}{y#1}
%      \cs_if_exist:cT{rawy#1}
%      \cs_if_free:cF{rawy#1}
%        {\cs_undefine:c{rawy#1}}
\cs_undefine:c{rawy#1}
      \exp_args:Nc\DeclareExpandableDocumentCommand
        {rawy#1}{}
        {\fp_use:c{l__mys_points_#1 coord2_fp}}
      }
    \int_compare:nT
      {##1>=3}
      {
%      \cs_if_exist:cT{z#1}{\cs_undefine:c{z#1}}
%      \cs_if_free:cF{z#1}{\cs_undefine:c{z#1}}
\cs_undefine:c{z#1}
      \exp_args:Nc\NewDocumentCommand{z#1}{O{}}
        {
        \num[####1]{\tl_use:c{l__mys_points_#1 coord3_tl}}
        }%parse-numbers=false
%      \cs_if_exist:cT{cot#1}
%      \cs_if_free:cF{cot#1}      
%      {\cs_undefine:c{cot#1}}
\cs_undefine:c{cot#1}
      \cs_set_eq:cc{cot#1}{z#1}
%      \cs_if_exist:cT{rawz#1}
%      \cs_if_free:cF{rawz#1}
%        {\cs_undefine:c{rawz#1}}
\cs_undefine:c{rawz#1}
      \exp_args:Nc\DeclareExpandableDocumentCommand
        {rawz#1}{}
        {\fp_use:c{l__mys_points_#1 coord3_fp}}
      }
    }
%  \cs_if_exist:cT{point#1}
%      \cs_if_free:cF{point#1}
%    {\cs_undefine:c{point#1}}
  \cs_undefine:c{point#1}
  \tl_clear:N\l_tmpb_tl
  \seq_pop_left:NN#3\l_tmpa_tl
%  \tl_put_right:Nn\l_tmpa_tl{\exp_not:N\cord}
%  \tl_put_right:Nn\l_tmpa_tl{\c_cfrac_lbrace_tl}
  \seq_map_inline:Nn#3
    {
    \bool_set_false:N\l__mys_points_macroincoord_bool
    \bool_set_false:N\l__mys_points_csincoord_bool
    \tl_set:Nn\l_tmpc_tl{##1}
    \tl_map_inline:Nn\l_tmpc_tl
      {
      \token_if_macro:NTF{####1}
        {\bool_gset_true:N\l__mys_points_macroincoord_bool}
        {
        \token_if_cs:NT{####1}
          {\bool_gset_true:N\l__mys_points_csincoord_bool}
        }
    }
    \bool_if:nTF
      {
      \l__mys_points_macroincoord_bool
        ||
        \l__mys_points_csincoord_bool
      }
      {\tl_put_right:Nx\l_tmpb_tl{\exp_not:N##1}}
      {\tl_put_right:Nx\l_tmpb_tl{;\num{##1}}}
    }
  \tl_set:Nx\l_tmpb_tl{\tl_tail:N\l_tmpb_tl}
  \tl_put_left:Nn\l_tmpb_tl{\c_cfrac_lbrace_tl}
  \tl_put_right:Nn\l_tmpb_tl{\c_cfrac_rbrace_tl}
  \exp_args:Ncnx\NewDocumentCommand{coord#1}{}
    {\exp_not:N\cord\tl_use:N\l_tmpb_tl}%\uuu
  \exp_args:Ncnx\NewDocumentCommand{point#1}{}
    {\tl_use:N\l_tmpa_tl\exp_not:N\cord\tl_use:N\l_tmpb_tl}
  \cs_set_eq:cc{pt#1}{point#1}
  \cs_undefine:c{raw#1}
  \expandafter\DeclareExpandableDocumentCommand\csname raw#1\endcsname{}{\fp_use:c{l__mys_points_#1 coord1_fp}\l__mys_points_element_sep_tl\fp_use:c{l__mys_points_#1 coord2_fp}}
%  \exp_args:Ncnx\DeclareExpandableDocumentCommand{raw#1}{}
%    {\fp_use:c{l__mys_points_#1 coord1_fp}\l__mys_points_element_sep_tl\fp_use:c{l__mys_points_#1 coord2_fp}}
  }
%
%
%
%
\DeclareExpandableDocumentCommand{\coord}{mm}
  {\use:c{rawx#1#2}}
%
%
%
\DeclareExpandableDocumentCommand{\rawx}{mm}
  {\use:c{rawx#1#2}}
%
%
%
\NewDocumentCommand{\dimpoint}{m}
  {\fp_use:c{l__mys_points_#1 dim_fp}}
%
%
%
\NewDocumentCommand{\printcoord}{O{parse-numbers=false}mm}
% #1 : \num options
% #2 : name
% #3 : coordinate index
  {\num[#1]{\tl_use:c{l__mys_points_#2coord#3_tl}}}
%
%
%
\NewDocumentCommand{\usecoord}{mm}
  {\fp_use:c{l__mys_points_#1coord#2_fp}}
%
%
%
\cs_new:Npn\mslf_points_type:nn#1#2
  {
  \seq_set_split:Nnn\l_tmpa_seq{,}{#2}
  \seq_clear:N\l_tmpb_seq
  \seq_map_inline:Nn\l_tmpa_seq
    {\seq_put_right:Nn\l_tmpb_seq{$\use:c{point##1}$}}
  \seq_use:Nnnn\l_tmpb_seq{#1}{,~}{#1}
  }
%
\cs_generate_variant:Nn\mslf_points_type:nn{nV}
%
%
%
\NewDocumentCommand{\typepoints}{O{~et~}m}%
  {
  \tl_if_single:nTF{#2}
    {
    \token_if_cs:NTF#2
      {\mslf_points_type:nV{#1}#2}
      {\mslf_points_type:nn{#1}{#2}}
    }
    {\mslf_points_type:nn{#1}{#2}}
  }
%
%
%
\NewDocumentCommand{\typepoint}{m}%
  {\use:c{point#1}}
%
% Tests
%
\def\test#1
  {
  \fp_set:Nx\l_tmpa_fp{\rawx{3}{#1}}
  \fp_use:N\l_tmpa_fp
  }% bad
%
%\def\test#1
%  {
%  \tl_set:Nx\l_tmpa_tl{\use:c{z#1}}
%  \tl_use:N\l_tmpa_tl
%  }% good%
%
\cs_new:Npn\__mys_points_test:n#1
  {
  \tl_set:Nn\l_tmpa_tl{#1}
  \tl_map_inline:Nn\l_tmpa_tl
    {
    \token_if_macro:NT##1{macro}
    \token_if_cs:NT##1{cs}
    }
  }
%
%
%
%\def\tmp{A/0/\frac12}
%\def\tmpi{\tmp}
%\def\tmpii{\tmpi}
%\setpoints{A/0/\frac12}
%\typepoints\mypoints
%\expandafter\setpoints\expandafter{\tmp}
%\typepoints\mypoints
%\setpoints\tmpii\typepoints\mypoints%
%
% #1 : list of points (Name/coord1/coord2/..., Name/coord1/..., ...). Name must begin by an uppercase letter followed by letters, digits, _ and ^
% #2 : separator of points
% #3 : separator of point's elements
%% A  et  A_1  sont des noms corrects.
%% a  et 1 sont des noms incorrects. 

\endinput

%*******************************************************
%						********************************
% DEFINE & STORE POINTS	********************************
%						********************************
%*******************************************************
%
%%
%%%  a voir
%%
%
\NewDocumentCommand{\setpoint}{m}%
	{%
	\seq_set_split:Nnn\__mys_point_set{,}{#1}%
	\int_set:Nn\__mys_point_dim{\seq_count:N\__mys_point_set-1}
	\seq_pop:NNTF\__mys_point_set\l_tmpa_tl{}{}%
	\tl_gset_eq:NN\__mys_point_name\l_tmpa_tl
	\fp_zero_new:c{absraw\__mys_point_name}
	\fp_zero_new:c{ordraw\__mys_point_name}
	\fp_zero_new:c{cotraw\__mys_point_name}
	\seq_pop:NNTF\__mys_point_set\l_tmpa_tl%
		{\fp_gset_eq:cN{abs\__mys_point_name}\l_tmpa_tl}%
		{}%
	\seq_pop:NNTF\__mys_point_set\l_tmpa_tl%
		{\fp_gset_eq:cN{ord\__mys_point_name}\l_tmpa_tl}%
		{}%
	\seq_pop:NNTF\__mys_point_set\l_tmpa_tl%
		{\fp_gset_eq:cN{cot\__mys_point_name}\l_tmpa_tl}%
		{}%
%\global\cslet{cotraw\__mys_point_name}\__mys_point_cot
      \cs_set:cx{cotraw\__mys_point_name}{\__mys_point_cot}	
%	\global\csdef{__mys_point_abs_\__mys_point_name}{\numprint{\csuse{absraw\__mys_point_name}}}
%	\global\csdef{__mys_point_abs_\__mys_point_name}{\numprint{\__mys_point_abs}}
%	\endgroup
%%	\cs_meaning:c{abs\tl_use:N\__mys_point_name}
%	\tl_if_blank:nTF{\__mys_point_abs}%
%		{\global\csdef{__mys_point_abs_\__mys_point_name}{}}%
%		{\global\csdef{__mys_point_abs_\__mys_point_name}{\numprint{\csuse{absraw\__mys_point_name}}}}%
%	\tl_if_blank:nTF{\__mys_point_ord}%
%		{\def\__mys_point_ord_toprint{}}%
%		{\gdef\__mys_point_ord_toprint{\numprint{\__mys_point_ord}}}%
%	\tl_if_blank:nTF{\__mys_point_cot}%
%		{\def\__mys_point_cot_toprint{}}%
%		{\def\__mys_point_cot_toprint{\numprint{\__mys_point_cot}}}%
%	\global\csletcs{abs\__mys_point_name}{__mys_point_abs_\__mys_point_name}
%	\global\cslet{ord\__mys_point_name}{\__mys_point_ord_toprint}
%	\global\cslet{cot\__mys_point_name}{\__mys_point_cot_toprint}
	\int_case:nnn{\__mys_point_dim}%
		{%
		{1}{}%
		{2}%
			{%
			\global\csdef{__mys_point\__mys_point_name}%
		{\__mys_point_name\cordn{\csuse{abs\__mys_point_name}}{\csuse{ord\__mys_point_name}}}%
%	\global\csletcs{point\__mys_point_name}{__mys_point\__mys_point_name}
      \cs_set:cx{point\__mys_point_name}{\use:c{__mys_point\__mys_point_name}}	
			}%
		{3}{%
			\global\csdef{__mys_point\__mys_point_name}%
		{\__mys_point_name\cordn{\csuse{abs\__mys_point_name}}{\csuse{ord\__mys_point_name}}{\csuse{cot\__mys_point_name}}}%
%	\global\csletcs{point\__mys_point_name}{__mys_point\__mys_point_name}
      \cs_set:cx{point\__mys_point_name}{\use:c{__mys_point\__mys_point_name}}	
			}%
		}%
		{dd}%
	}
%
%%
%%%	Points  : A(?,?), B(?,?), ... et ?(?,?)
%%
%
%\def\p@int#1/#2/#3/{\ensuremath{#1\cordn{#2}{#3}}}
%\def\point#1{\p@int#1/}
%\def\points#1{\foreach \nmpt/\crdpti/\crdptii [count=\n]in {#1}{\global\let\nmax\n}%
%\foreach \nmpt/\crdpti/\crdptii [count=\n]in {#1}{\ifnum\n=\nmax\ifnum\nmax>1 \ et\ \fi\else \ifnum\n=1\else,\ \fi\fi\point{\nmpt/\crdpti/\crdptii}}}
\cs_new:Npn\mslf_point_type_bis_aux:w#1\l__mys_points_element_sep_tl#2\q_stop
	{\ensuremath{#1\cordbis{#2}}% avec \cordbis, une coordonnée contenant une macro comme \frac pose problème
	}
\cs_new:Npn\mslf_point_type_nobis_aux:w#1\l__mys_points_element_sep_tl#2\q_stop
	{\ensuremath{#1\cord{#2}}
	}
%
\cs_new:Npn\mslf_point_twochar:w#1#2#3\q_stop#4
	{
	\tl_set:Nn#4{#1#2}
	}
\cs_new:Npn\mslf_point_onechar:w#1#2\q_stop#3
	{
	\tl_set:Nn#3{#1}
	}
\cs_generate_variant:Nn\tl_if_in:VnTF{VVTF}
\tl_const:Nn \c_mslf_digits_tl {-1-2-3-4-5-6-7-8-9-0 0. 1. 2. 3. 4. 5. 6. 7. 8. 9.}
\tl_const:Nn \c_mslf_onedigits_tl {0123456789}
%
\cs_new:Npn\mslf_point_store_aux:w#1\l__mys_points_element_sep_tl#2\q_stop
	{
	\expandafter\gdef\csname coord#1\endcsname{\cord{#2}}
	\expandafter\gdef\csname pt#1\endcsname{#1\cord{#2}}
%
	\seq_set_split:Nnn\l_tmpa_seq\l__mys_points_element_sep_tl{#2}
%
	\seq_gset_eq:cN{l_point#1_seq}\l_tmpa_seq
%
	\int_zero:N\l_tmpa_int
	\seq_map_inline:Nn\l_tmpa_seq
		{
		\int_incr:N\l_tmpa_int
		\mslf_point_onechar:w##10\q_stop\l_tmpa_tl%\tl_show:N\l_tmpa_tl
		\tl_if_in:VVTF\c_mslf_onedigits_tl\l_tmpa_tl
			{
			\fp_zero_new:c{l_mslf_point#1_x{\int_use:N\l_tmpa_int}_fp}					
			\fp_gset:cn{l_mslf_point#1_x{\int_use:N\l_tmpa_int}_fp}{##1}
			\cs_gset_eq:NN\mslf_point_type_aux:w\mslf_point_type_nobis_aux:w% avec \mslf_point_type_bis_aux:w, une coordonnée contenant une macro comme \frac pose problème
			}
			{
			\mslf_point_twochar:w##10\q_stop\l_tmpa_tl
			\tl_if_in:VVTF\c_mslf_digits_tl\l_tmpa_tl
				{
				\fp_zero_new:c{l_mslf_point#1_x{\int_use:N\l_tmpa_int}_fp}					
				\fp_gset:cn{l_mslf_point#1_x{\int_use:N\l_tmpa_int}_fp}{##1}
				\cs_gset_eq:NN\mslf_point_type_aux:w\mslf_point_type_bis_aux:w
				}
				{
				\cs_gset_eq:NN\mslf_point_type_aux:w\mslf_point_type_nobis_aux:w
				}		
			}
		}
%
      \cs_undefined:c{x#1}
	\expandafter\gdef\csname x#1\endcsname{\fp_use:c{l_mslf_point#1_x{1}_fp}}
      \cs_undefined:c{y#1}
	\expandafter\gdef\csname y#1\endcsname{\fp_use:c{l_mslf_point#1_x{2}_fp}}
%	\expandafter\def\csname z#1\endcsname{\fp_use:c{l_mslf_point#1_x{3}_fp}}
	}
\DeclareExpandableDocumentCommand{\coord}{mm}{\fp_use:c{l_mslf_point#2_x{#1}_fp}}
%
\cs_new:Npn\mslf_point_store:n#1
	{
	\mslf_point_store_aux:w#1\q_stop
	}
\cs_new:Npn\mslf_point_type:n#1
	{
	\mslf_point_type_aux:w#1\q_stop
	}
%
\NewDocumentCommand{\point}{m}%
	{
	\mslf_point_store:n{#1}
	\mslf_point_type:n{#1}
	}
%
\NewDocumentCommand{\typepoint}{m}%
	{
	\mslf_point_type:n{#1}
	}
%
\NewDocumentCommand\mypointslist{}{}
%
\NewDocumentCommand{\setpoints}{O{\mypointslist}m}%
	{
	\group_begin:
	\seq_set_split:Nnn\l_tmpa_seq{,}{#2}
	\seq_map_inline:Nn\l_tmpa_seq
		{
		\exp_args:Nx\mslf_point_store:n{##1}
		\seq_put_right:Nn\l_tmpb_seq{\mslf_point_type:n{##1}}
		}
%	\global\let#1\l_tmpb_seq
      \cs_set:Nx#1{\seq_use:N\l_tmpb_seq}	
	\group_end:
	}
%
%
\NewDocumentCommand{\typepoints}{m}%
	{
%	\seq_set_split:Nnn\l_tmpa_seq{,}{#1}
	\seq_use:Nnnn#1{~et~}{,~}{~et~}
	}
%
%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
\endinput
%
%*******************************************************
%						********************************
% DEFINE & STORE POINTS	********************************
%						********************************
%*******************************************************
%
%%
%%%  
%%
%

%
% Usage :
%%\setpoints{A/1/2,B/3/-1}
%%\typepoints\mypointslist
%%
%%%\typepoints{A,B}
%%
%%$\coordB$
%%
%%\coord1A
%%
%%\yA
%%
%%\pgfmathparse{\xA+\yB}\pgfmathresult